//*************************************************************************
//
// ここにオブジェクトの説明
//
//*************************************************************************

//*************************************************************************
// インクルード部
//*************************************************************************
#include "Result_Circuit.h" 

//*************************************************************************
// コンストラクタ
//*************************************************************************
Result_Circuit::Result_Circuit(void)
{
	// オブジェクトを何個作成するか？(最低 1〜)
	//**********************************************************************
	nObject_Num	= 2;

	// テクスチャを何種類使用するか？(最低 1〜)
	//**********************************************************************
	nUse_Texture_Num = 2;

	// オブジェクトの個数分、必要なサイズを確保
	//**********************************************************************
	Tex_2D_Data = new TEXTURE_2D_DATA[nObject_Num];

	for( int i = 0 ; i < nObject_Num ; i ++ )
	{
		// 座標(画像の中心を原点)
		//******************************************************************
		Tex_2D_Data[i].Obj_Pos	= D3DXVECTOR3(	(float)(SCREEN_WIDTH / 2), (float)(SCREEN_HEIGHT / 2), 0.0f );

		// オブジェクトのサイズ(X,Y)
		//******************************************************************
		Tex_2D_Data[i].Obj_Size	= D3DXVECTOR2(SCREEN_WIDTH, SCREEN_HEIGHT);

		// テクスチャ座標(0.0f〜1.0f)
		//******************************************************************
		Tex_2D_Data[i].Tex_Pos  = D3DXVECTOR2( 0.0f, 0.0f );

		// 1アニメーション毎のテクスチャ座標(0.0f〜1.0f)
		//******************************************************************
		Tex_2D_Data[i].Tex_Anim = D3DXVECTOR2( 1.0f, 1.0f );

		// 画像のRGBA値
		//******************************************************************
		Tex_2D_Data[i].Red  =
		Tex_2D_Data[i].Green=
		Tex_2D_Data[i].Brue =
		Tex_2D_Data[i].Alpha= 255;

		// 画像の拡大率( 0.0f〜 )
		//******************************************************************
		Tex_2D_Data[i].fScale = 1.0f;

		// 画像の回転角度( 0.0f〜 )
		//******************************************************************
		Tex_2D_Data[i].fRot = 0.0f;
	}

	CTexture_2D_Base::Init();

	// テクスチャ読み込み(複数の場合は複数回読みこんでください)
	// 引数：	TEXTURE_FILE = 読み込みたい画像ファイルのパス
	//			NUMBER		 = 読み込むテクスチャパスの配列番地(これの数字下のDraw()で渡す引数の数字になります)
	//						   ( 0 〜 指定してください)
	//**********************************************************************
	CTexture_2D_Base::Load_Texture( "../DATA/TEXTURE/Result/回路1.png", 0 );
	CTexture_2D_Base::Load_Texture( "../DATA/TEXTURE/Result/回路2.png", 1 );

	// α値の増減に使用
	//**********************************************************************
	nAdd_Alpha1 = 10;
	nAdd_Alpha2 = 20;

	// フレームカウントに使用
	//**********************************************************************
	nFrame_Cnt1 = 0;
	nFrame_Cnt2 = 0;
}

//*************************************************************************
// デストラクタ
//*************************************************************************
Result_Circuit::~Result_Circuit(void)
{
	CTexture_2D_Base::Finalise();
}

//*************************************************************************
// 更新処理
//*************************************************************************
void Result_Circuit::Update(void)
{
	nFrame_Cnt1 ++;
	nFrame_Cnt2 ++;

	if (nFrame_Cnt1 > 10)
	{
		nFrame_Cnt1 = 0;

		Tex_2D_Data[0].Alpha += nAdd_Alpha1;

		if ( Tex_2D_Data[0].Alpha > 255 ) 
		{
			Tex_2D_Data[0].Alpha = 255;
			nAdd_Alpha1 *= -1;
		}
		if (Tex_2D_Data[0].Alpha < 150)
		{
			Tex_2D_Data[0].Alpha = 150;
			nAdd_Alpha1 *= -1;
		}
	}


	if (nFrame_Cnt2 > 20)
	{
		nFrame_Cnt2 = 0;

		Tex_2D_Data[1].Alpha += nAdd_Alpha1;

		if (Tex_2D_Data[1].Alpha > 255)
		{
			Tex_2D_Data[1].Alpha = 255;
			nAdd_Alpha1 *= -1;
		}
		if (Tex_2D_Data[1].Alpha < 125)
		{
			Tex_2D_Data[1].Alpha = 125;
			nAdd_Alpha1 *= -1;
		}
	}


	CTexture_2D_Base::Update();
}

//*************************************************************************
// 描画処理
//*************************************************************************
void Result_Circuit::Draw(void)
{
	CTexture_2D_Base::Draw( 0, 0 );
	CTexture_2D_Base::Draw( 1, 1) ;
}

//*************************************************************************
// EOF
//*************************************************************************
