//***********************************************************************************************************
//
// 曲データ管理クラス
//
//***********************************************************************************************************
#pragma once

//***********************************************************************************************************
// インクルード部
//***********************************************************************************************************
#define _CRT_SECURE_NO_WARNINGS	// 警告無視
#include "CWindowAPI.h"
#include <string.h>				// strcmp()で使用
#include <stdio.h>

//***********************************************************************************************************
// 構造体定義
//***********************************************************************************************************

// 曲に使用するデータのパス
//*************************************************
typedef struct
{
	 int Music_Title_Length;		// 曲タイトル文字数
	char Music_Title[50];			// 曲タイトル名
	char Folder_Path[100];			// フォルダまでのパス("../DATA/MUSIC/○○.music")
	char Fumen_Path[3][100];		// 譜面のパス("../DATA/MUSIC/○○.music/○○.easy or hyper or master")
	char Music_Path[100];			// 音源のパス("../DATA/MUSIC/○○.music/○○.wav")
	char Picture_Path[100];			// 画像のパス("../DATA/MUSIC/○○.music/○○.png")
	char Hiscore_Path[100];			// ハイスコアのパス("../DATA/MUSIC/○○.music/○○.hiscore")

	bool Easy_In;					// イージー譜面があるかどうか
	bool Hyper_In;					// ハイパー譜面があるかどうか
	bool Master_In;					// マスター譜面があるかどうか

	bool Jacket_In;					// ジャケット画像が入っているかどうか

	 int Easy_Hiscore;				// イージー譜面のハイスコア
	 int Hyper_Hiscore;				// ハイパー譜面のハイスコア
	 int Master_Hiscore;			// マスター譜面のハイスコア

	 char Easy_ClearMark[3];		// イージー譜面のクリアマーク
	 char Hyper_ClearMark[3];		// ハイパー譜面のクリアマーク
	 char Master_ClearMark[3];		// マスター譜面のクリアマーク
}MUSIC_DATA;

//***********************************************************************************************************
// クラス定義
//***********************************************************************************************************
class CMusic_Manager
{
private:
	static MUSIC_DATA*		Music_Data;		// 曲情報まとめ構造体
	static int				nMusic_Count;	// 曲総数

public:
	void Init(void);						// 初期化
	void Finalise(void);					// 終了
	void Load(void);						// 曲情報一括読み込み

	static int Get_Music_Count() { return nMusic_Count; };						// 曲総数を返す
	static MUSIC_DATA* Get_MusicData(int nNum) { return &Music_Data[nNum]; };	// 曲データを返す
};

//***********************************************************************************************
// EOF
//***********************************************************************************************