//*************************************************************************
//
// 曲セレクト画面・背景エフェクト
//
//*************************************************************************

//*************************************************************************
// インクルード部
//*************************************************************************
#include "MusicSelect_BackEffect.h" 

//*************************************************************************
// コンストラクタ
//*************************************************************************
MusicSelect_BackEffect::MusicSelect_BackEffect(void)
{
	// オブジェクトを何個作成するか？(最低 1〜)
	//**********************************************************************
	nObject_Num = 20;

	// テクスチャを何種類使用するか？(最低 1〜)
	//**********************************************************************
	nUse_Texture_Num = 1;

	// 生存フラグを必要な個数分生成
	//**********************************************************************
	bLife = new bool[nObject_Num];

	// α値増加量を必要な個数分生成
	//**********************************************************************
	nAddAlpha = new int[nObject_Num];

	// オブジェクトの個数分、必要なサイズを確保
	//**********************************************************************
	Tex_2D_Data = new TEXTURE_2D_DATA[nObject_Num];

	for( int i = 0 ; i < nObject_Num ; i ++ )
	{
		// 座標(画像の中心を原点)
		//******************************************************************
		Tex_2D_Data[i].Obj_Pos	= D3DXVECTOR3();

		// オブジェクトのサイズ(X,Y)
		//******************************************************************
		Tex_2D_Data[i].Obj_Size	= D3DXVECTOR2();

		// テクスチャ座標(0.0f〜1.0f)
		//******************************************************************
		Tex_2D_Data[i].Tex_Pos  = D3DXVECTOR2( 0.0f, 0.0f );

		// 1アニメーション毎のテクスチャ座標(0.0f〜1.0f)
		//******************************************************************
		Tex_2D_Data[i].Tex_Anim = D3DXVECTOR2( 1.0f, 1.0f );

		// 画像のRGBA値
		//******************************************************************
		Tex_2D_Data[i].Red		=
		Tex_2D_Data[i].Green	=
		Tex_2D_Data[i].Brue		= 255;
		Tex_2D_Data[i].Alpha	= 0;

		// 画像の拡大率( 0.0f〜 )
		//******************************************************************
		Tex_2D_Data[i].fScale = 1.0f;

		// 画像の回転角度( 0.0f〜 )
		//******************************************************************
		Tex_2D_Data[i].fRot = 0.0f;

		// 生存フラグリセット
		//******************************************************************
		bLife[i] = false;

		// α値増加量リセット
		//******************************************************************
		nAddAlpha[i] = 0;
	}

	CTexture_2D_Base::Init();

	// テクスチャ読み込み(複数の場合は複数回読みこんでください)
	// 引数：	TEXTURE_FILE = 読み込みたい画像ファイルのパス
	//			NUMBER		 = 読み込むテクスチャパスの配列番地(これの数字下のDraw()で渡す引数の数字になります)
	//						   ( 0 〜 指定してください)
	//**********************************************************************
	CTexture_2D_Base::Load_Texture("../DATA/TEXTURE/MusicSelect/背景エフェクト.png", 0 );
	
}

//*************************************************************************
// デストラクタ
//*************************************************************************
MusicSelect_BackEffect::~MusicSelect_BackEffect(void)
{
	delete[] bLife;
	delete[] nAddAlpha;

	CTexture_2D_Base::Finalise();
}

//*************************************************************************
// 更新処理
//*************************************************************************
void MusicSelect_BackEffect::Update(void)
{
	nCount++;

	// 一定時間ごとにエフェクト生成
	//*********************************************************************
	if (nCount > 60)
	{
		nCount = 0;

		New_Effect();
	}

	for (int i = 0; i < nObject_Num; i++)
	{	// 生存中のオブジェクトのみ更新作業
		if (bLife[i] != true)
			continue;

		// 拡大
		//*****************************************************************
		Tex_2D_Data[i].Obj_Size.x += 1.0f;
		Tex_2D_Data[i].Obj_Size.y += 1.0f;

		// α値増加
		//*****************************************************************
		Tex_2D_Data[i].Alpha += nAddAlpha[i];

		// α値がある程度までいったら消滅作業
		//*****************************************************************
		if (Tex_2D_Data[i].Alpha >= 150)
		{
			nAddAlpha[i] *= -1;
		}
		if (Tex_2D_Data[i].Alpha <= 0)
		{
			bLife[i] = false;
			Tex_2D_Data[i].Alpha = 0;
			nAddAlpha[i] = 0;
		}
	}

	CTexture_2D_Base::Update();
}

//*************************************************************************
// 描画処理
//*************************************************************************
void MusicSelect_BackEffect::Draw(void)
{
	for (int i = 0; i < nObject_Num; i++)
	{
		// 生存していないならスキップ
		if (bLife[i] != true)
			continue;

		CTexture_2D_Base::Draw(i, 0);
	}
}

//*************************************************************************
// ひし形エフェクト生成
//*************************************************************************
void MusicSelect_BackEffect::New_Effect(void)
{
	for (int i = 0; i < nObject_Num; i++)
	{
		// 生存しているならスキップ
		//*****************************************************************
		if (bLife[i] == true)
			continue;

		// 生存フラグセット
		//*****************************************************************
		bLife[i] = true;

		// 座標セット
		//*****************************************************************
		Tex_2D_Data[i].Obj_Pos = D3DXVECTOR3((float)(rand() % SCREEN_WIDTH), (float)(rand() % SCREEN_HEIGHT), 0.0f );

		//Tex_2D_Data[i].Obj_Pos.x = 500.0f;
		//Tex_2D_Data[i].Obj_Pos.y = 200.0f;
		//Tex_2D_Data[i].Obj_Pos.y = 0.0f;

		// サイズセット
		//*****************************************************************
		int nSize = rand() % 200 + 50;
		Tex_2D_Data[i].Obj_Size = D3DXVECTOR2(nSize, nSize);

		// α値セット
		//*****************************************************************
		Tex_2D_Data[i].Alpha = 0;

		// α値増加量セット
		//*****************************************************************
		nAddAlpha[i] = 1;

		// 生成終了したら終了
		//*****************************************************************
		break;
	}
}

//*************************************************************************
// EOF
//*************************************************************************
