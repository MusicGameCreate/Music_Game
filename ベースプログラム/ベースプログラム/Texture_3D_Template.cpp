//***********************************************************************************************************
//
//　 Texture_3D_Template.cpp
// 　3D画像描画プログラムのテンプレートcpp
//   3D描画基本クラスを継承しています( CTexture_3D_Base )
//
//***********************************************************************************************************

//***********************************************************************************************************
// インクルード部
//***********************************************************************************************************
#include "Texture_3D_Template.h"

//***********************************************************************************************************
// コンストラクタ
//***********************************************************************************************************
Texture_3D_Template::Texture_3D_Template()
{
	// オブジェクトを何個作成するか？(最低 1〜)
	//*******************************************************************************************************
	nObject_Num	= 2;

	// テクスチャを何種類使用するか？(最低 1〜)
	//*******************************************************************************************************
	nUse_Texture_Num = 2;

	// 各種設定を指定
	//*******************************************************************************************************
	bBillboard	= false;	// ビルボードにするかどうか
	bAlphaTest	= false;	// αテストを適用するかどうか


	// オブジェクトの個数分、必要なサイズを確保
	//*******************************************************************************************************
	Tex_3D_Data = new TEXTURE_3D_DATA[nObject_Num];

	for( int i = 0 ; i < nObject_Num ; i ++ )
	{
		// 座標(画像の中心を原点)
		//***************************************************************************************************
		Tex_3D_Data[i].Obj_Pos	= D3DXVECTOR3(	0.0f, 0.0f, 0.0f );

		// オブジェクトのサイズ(X,Y)
		//***************************************************************************************************
		Tex_3D_Data[i].Obj_Size	= D3DXVECTOR2( SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 );

		// テクスチャ座標(0.0f〜1.0f)
		//***************************************************************************************************
		Tex_3D_Data[i].Tex_Pos	= D3DXVECTOR2( 0.0f, 0.0f );
	
		// 1アニメーション毎のテクスチャ座標(0.0f〜1.0f)
		//***************************************************************************************************
		Tex_3D_Data[i].Tex_Anim	= D3DXVECTOR2( 1.0f, 1.0f );
	
		// 画像のRGBA値
		//***************************************************************************************************
		Tex_3D_Data[i].Red		=
		Tex_3D_Data[i].Brue		=
		Tex_3D_Data[i].Green	=
		Tex_3D_Data[i].Alpha	= 255;

		// 画像の拡大率(0.0f〜)
		//***************************************************************************************************
		Tex_3D_Data[i].Obj_Scale	= D3DXVECTOR3( 1.0f, 1.0f, 1.0f );

		// 画像の回転角度(0.0f〜)
		//***************************************************************************************************
		Tex_3D_Data[i].Obj_Rot		= D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
	}

	CTexture_3D_Base::Init();

	// テクスチャ読み込み(複数の場合は複数回読みこんでください)
	// 引数：	TEXTURE_FILE = 読み込みたい画像ファイルのパス
	//			NUMBER		 = 読み込むテクスチャパスの配列番地(これの数字下のDraw()で渡す引数の数字になります)
	//						   ( 0 〜 指定してください)
	//*******************************************************************************************************
	CTexture_3D_Base::Load_Texture("../DATA/TEXTURE/Title.jpg", 0);
	CTexture_3D_Base::Load_Texture("../DATA/TEXTURE/Title.jpg", 1);
}

//***************************************************************************************************
// デストラクタ
//***************************************************************************************************
Texture_3D_Template::~Texture_3D_Template()
{
	CTexture_3D_Base::Finalise();
}

//***************************************************************************************************
// void Texture_3D_Template::Update
// 説明：更新処理
// 引数：なし　戻り値：なし
//***************************************************************************************************
void Texture_3D_Template::Update()
{

	//***********************************************************************************************
	// キーボード操作
	// GetKeyboard( 入力に使うキー, 下の4つのどれか )
	// PRESS  ：押している間
	// REPEAT ：押している間(最初1回にラグあり)
	// TRIGGER：キーを押した瞬間(1回のみ判定)
	// RELEASE：キーを離した瞬間(1回のみ判定)
	//***********************************************************************************************
	//if ( CInput::GetKeyboardData( DIK_RETURN,TRIGGER ) )
	//{
	//	
	//}

	//***********************************************************************************************
	// マウス操作
	// GetMouseData( 入力に使うキー, 下の3つの状態のどれか )
	// 入力に使うキーは以下の3つです
	// L_BUTTON：左クリック
	// R_BUTTON：右クリック
	// C_BUTTON：ホイールボタン
	// 
	// 状態は以下の2つです
	// PRESS  ：押している間
	// TRIGGER：キーを押した瞬間(1回のみ判定)
	// RELEASE：キーを離した瞬間(1回のみ判定)
	//***********************************************************************************************
	//if ( CInput::GetMouseData( L_BUTTON , PRESS ) )
	//{

	//}

	// 加算合成をしたい場合は↓
	//***********************************************************************************************
	//CDirectX::Get_pD3DDevice()->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_ONE );

	CTexture_3D_Base::Update();
}

//***************************************************************************************************
// void Texture_3D_Template::Draw
// 説明：描画処理
// 引数：なし　戻り値：なし
//***************************************************************************************************
void Texture_3D_Template::Draw()
{
	//*******************************************************************************************************
	// 描画はここで
	// 引数：	NUMBER		= 描画したいオブジェクトの番号( nObject_Num - 1 まで )
	//			SET_TEXTURE = オブジェクトに貼り付けたいテクスチャの番号( Load_Texture()で設定した数字と一緒( 0 〜 ) )
	//*******************************************************************************************************
	CTexture_3D_Base::Draw(0, 0);
	CTexture_3D_Base::Draw(1, 1);
}